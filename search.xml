<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>哈希表类刷题day6</title>
      <link href="/posts/798a.html"/>
      <url>/posts/798a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><div class="note info">前言：努力刷题day5</div><br></p><h3 id="LeetCode-349-两个数组的交集传送门"><a href="#LeetCode-349-两个数组的交集传送门" class="headerlink" title="LeetCode 349.  两个数组的交集传送门"></a>LeetCode 349.  两个数组的交集<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">传送门</a></h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-keyword">null</span> || nums1.length == <span class="hljs-number">0</span> || nums2 == <span class="hljs-keyword">null</span> || nums2.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; set1 = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; resSet = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        //遍历数组<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums1) &#123;<br>            set1.<span class="hljs-keyword">add</span>(i);<br>        &#125;<br>        //遍历数组<span class="hljs-number">2</span>的过程中判断哈希表中是否存在该元素<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums2) &#123;<br>            <span class="hljs-keyword">if</span> (set1.contains(i)) &#123;<br>                resSet.<span class="hljs-keyword">add</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] resArr = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[resSet.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br>        //将结果几何转为数组<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : resSet) &#123;<br>            resArr[<span class="hljs-keyword">index</span>++] = i;<br>        &#125;<br>        <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-keyword">null</span> || nums1.length == <span class="hljs-number">0</span> || nums2 == <span class="hljs-keyword">null</span> || nums2.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; set1 = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; resSet = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        //遍历数组<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums1) &#123;<br>            set1.<span class="hljs-keyword">add</span>(i);<br>        &#125;<br>        //遍历数组<span class="hljs-number">2</span>的过程中判断哈希表中是否存在该元素<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums2) &#123;<br>            <span class="hljs-keyword">if</span> (set1.contains(i)) &#123;<br>                resSet.<span class="hljs-keyword">add</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] resArr = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[resSet.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br>        //将结果几何转为数组<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : resSet) &#123;<br>            resArr[<span class="hljs-keyword">index</span>++] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> resArr;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="LeetCode-242-有效的字母异位词-传送门"><a href="#LeetCode-242-有效的字母异位词-传送门" class="headerlink" title="LeetCode 242.有效的字母异位词 传送门"></a>LeetCode 242.有效的字母异位词 <a href="https://leetcode-cn.com/problems/valid-anagram/">传送门</a></h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> isAnagram(String s, String t) &#123;<br>        <span class="hljs-keyword">if</span> (s.length() != t.length()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] table = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">table</span>[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123;<br>            <span class="hljs-keyword">table</span>[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]<span class="hljs-comment">--;</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">table</span>[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> isAnagram(String s, String t) &#123;<br>        <span class="hljs-keyword">if</span> (s.length() != t.length()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] table = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">table</span>[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123;<br>            <span class="hljs-keyword">table</span>[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]<span class="hljs-comment">--;</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">table</span>[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那年杏花微雨</title>
      <link href="/posts/suibi1.html"/>
      <url>/posts/suibi1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id><a href="#" class="headerlink" title=" "></a> </h4><div class="ipage">    <div class="ititle">- 前言</div>  <div class="izhengwen">  <p><br>  堆枕乌云堕翠翘。午梦惊回，满眼春娇。<br>  <code>嬛嬛一袅楚宫腰。</code>那更春来，玉减香消。<br>  柳下朱门傍小桥。几度红窗，误认鸣镳。<br>  断肠风月可怜宵。忍使恹恹，两处无聊。<br>  </p>  <p>说来也奇怪，《甄嬛传》这部剧火了10年，我一直没有看。前段时间大家都在寻找‘没看过《甄嬛传》眼睛’，我当时还在想，我还是不想看，哎。但由于被封在家里，一动不动，就点开了甄嬛，大概看了一周，昨天看完了，这部剧并没有让我有想探究后续剧情的欲望，许是在平时接触过一些短视频，对剧情略知一二。</p>  <p>我内心对历史上的雍正评价很高，但这部剧里的雍正，着实让我喜欢不起来。看到他死的时候，我：终于死了，烦死我了……那就随便写写我的看法，这部剧从始到终都在提纯元皇后，我就在想，纯元皇后如果活着，雍正会一直这么爱她吗？我想：不会。还是这个从未露过面的纯元皇后，起初我一直以为纯元是雍正的第一个老婆，但往后看才知道宜修比纯元先嫁给雍正，并且雍正答应宜修，只要生出世子，就立她为正福晋。可雍正根本没实现诺言。看到这里，我被剧中的雍正气到了。  </p>  <p>在说回来，我很气雍正，但并不会为宜修打抱不平，宜修心肠太狠。毒害自己的姐姐，后宫的孩子都是死在她的手里，对这个角色，总结应该是：狠、恨、爱。“你以为姐姐有多爱你吗”</p>  <p>未完待续</p>  </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影视剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表类刷题day5</title>
      <link href="/posts/nulishuatiday5.html"/>
      <url>/posts/nulishuatiday5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><div class="note info">前言：努力刷题day5</div><br></p><h3 id="1-LeetCode-19-删除链表的倒数第-N-个结点-传送门"><a href="#1-LeetCode-19-删除链表的倒数第-N-个结点-传送门" class="headerlink" title="1.LeetCode 19. 删除链表的倒数第 N 个结点 传送门"></a>1.LeetCode 19. 删除链表的倒数第 N 个结点 <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">传送门</a></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs routeros">class Solution &#123;<br>    public ListNode removeNthFromEnd(ListNode head, int n) &#123;<br>        ListNode <span class="hljs-attribute">dummyHead</span>=new ListNode(-1);<br>         dummyHead.<span class="hljs-attribute">next</span>=head;<br>        ListNode <span class="hljs-attribute">fast</span>=dummyHead;<br>        ListNode <span class="hljs-attribute">slow</span>=dummyHead;<br>        <span class="hljs-keyword">while</span>(n-- &gt;0)<br>        &#123;<br>            <span class="hljs-attribute">fast</span>=fast.next;<br>        &#125;<br>        <span class="hljs-attribute">fast</span>=fast.next;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-attribute">fast</span>=fast.next;<br>            <span class="hljs-attribute">slow</span>=slow.next;<br>        &#125;<br>        slow.<span class="hljs-attribute"><code class="language-hljs routeros">class Solution &#123;<br>    public ListNode removeNthFromEnd(ListNode head, int n) &#123;<br>        ListNode <span class="hljs-attribute">dummyHead</span>=new ListNode(-1);<br>         dummyHead.<span class="hljs-attribute">next</span>=head;<br>        ListNode <span class="hljs-attribute">fast</span>=dummyHead;<br>        ListNode <span class="hljs-attribute">slow</span>=dummyHead;<br>        <span class="hljs-keyword">while</span>(n-- &gt;0)<br>        &#123;<br>            <span class="hljs-attribute">fast</span>=fast.next;<br>        &#125;<br>        <span class="hljs-attribute">fast</span>=fast.next;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-attribute">fast</span>=fast.next;<br>            <span class="hljs-attribute">slow</span>=slow.next;<br>        &#125;<br>        slow.<span class="hljs-attribute">next</span>=slow.next.next;<br>        return dummyHead.next;<br>       <br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-LeetCode-面试题-02-07-链表相交-传送门"><a href="#2-LeetCode-面试题-02-07-链表相交-传送门" class="headerlink" title="2.LeetCode 面试题 02.07. 链表相交 传送门"></a>2.LeetCode 面试题 02.07. 链表相交 <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">传送门</a></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;<br>        ListNode curA = headA;<br>        ListNode curB = headB;<br>        <span class="hljs-keyword">int</span> lenA = <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (curA != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 求链表A的长度</span><br>            lenA++;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (curB != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 求链表B的长度</span><br>            lenB++;<br>            curB = curB.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        curA = headA;<br>        curB = headB;<br>        <span class="hljs-comment">// 让curA为最长链表的头，lenA为其长度</span><br>        <span class="hljs-keyword">if</span> (lenB &gt; lenA) &#123;<br>            <span class="hljs-comment">//1. swap (lenA, lenB);</span><br>            <span class="hljs-keyword">int</span> tmpLen = lenA;<br>            lenA = lenB;<br>            lenB = tmpLen;<br>            <span class="hljs-comment">//2. swap (curA, curB);</span><br>            ListNode tmpNode = curA;<br>            curA = curB;<br>            curB = tmpNode;<br>        &#125;<br>        <span class="hljs-comment">// 求长度差</span><br>        <span class="hljs-keyword">int</span> gap = lenA - lenB;<br>        <span class="hljs-comment">// 让curA和curB在同一起点上（末尾位置对齐）</span><br>        <span class="hljs-keyword">while</span> (gap-- &gt; <span class="hljs-number">0</span>) &#123;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-comment">// 遍历curA 和 curB，遇到相同则直接返回</span><br>        <span class="hljs-keyword">while</span> (curA != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curA == curB) &#123;<br>                <span class="hljs-keyword">return</span> curA;<br>            &#125;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>            curB = curB.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;<br>        ListNode curA = headA;<br>        ListNode curB = headB;<br>        <span class="hljs-keyword">int</span> lenA = <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (curA != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 求链表A的长度</span><br>            lenA++;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (curB != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 求链表B的长度</span><br>            lenB++;<br>            curB = curB.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        curA = headA;<br>        curB = headB;<br>        <span class="hljs-comment">// 让curA为最长链表的头，lenA为其长度</span><br>        <span class="hljs-keyword">if</span> (lenB &gt; lenA) &#123;<br>            <span class="hljs-comment">//1. swap (lenA, lenB);</span><br>            <span class="hljs-keyword">int</span> tmpLen = lenA;<br>            lenA = lenB;<br>            lenB = tmpLen;<br>            <span class="hljs-comment">//2. swap (curA, curB);</span><br>            ListNode tmpNode = curA;<br>            curA = curB;<br>            curB = tmpNode;<br>        &#125;<br>        <span class="hljs-comment">// 求长度差</span><br>        <span class="hljs-keyword">int</span> gap = lenA - lenB;<br>        <span class="hljs-comment">// 让curA和curB在同一起点上（末尾位置对齐）</span><br>        <span class="hljs-keyword">while</span> (gap-- &gt; <span class="hljs-number">0</span>) &#123;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-comment">// 遍历curA 和 curB，遇到相同则直接返回</span><br>        <span class="hljs-keyword">while</span> (curA != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curA == curB) &#123;<br>                <span class="hljs-keyword">return</span> curA;<br>            &#125;<br>            curA = curA.<span class="hljs-keyword">next</span>;<br>            curB = curB.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表类刷题day4</title>
      <link href="/posts/nulishuatiday4.html"/>
      <url>/posts/nulishuatiday4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">努力刷题day4</div><h3 id="1-LeetCode-206-反转链表-传送门"><a href="#1-LeetCode-206-反转链表-传送门" class="headerlink" title="1.LeetCode 206.反转链表 传送门"></a>1.LeetCode 206.反转链表 <a href="https://leetcode-cn.com/problems/reverse-linked-list/">传送门</a></h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs q"><span class="hljs-comment">// 双指针</span><br>class Solution &#123;<br>    public ListNode reverseList(ListNode head) &#123;<br>        ListNode <span class="hljs-built_in">prev</span> = <span class="hljs-built_in">null</span>;<br>        ListNode cur = head;<br>        ListNode temp = <span class="hljs-built_in">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-built_in">null</span>) &#123;<br>            temp = cur.<span class="hljs-built_in">next</span>;<span class="hljs-comment">// 保存下一个节点</span><br>            cur.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">prev</span>;<br>            <span class="hljs-built_in">prev</span> = cur;<br>            cur = temp;<br>        &#125;<br>        return <span class="hljs-built_in"><code class="language-hljs q"><span class="hljs-comment">// 双指针</span><br>class Solution &#123;<br>    public ListNode reverseList(ListNode head) &#123;<br>        ListNode <span class="hljs-built_in">prev</span> = <span class="hljs-built_in">null</span>;<br>        ListNode cur = head;<br>        ListNode temp = <span class="hljs-built_in">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-built_in">null</span>) &#123;<br>            temp = cur.<span class="hljs-built_in">next</span>;<span class="hljs-comment">// 保存下一个节点</span><br>            cur.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">prev</span>;<br>            <span class="hljs-built_in">prev</span> = cur;<br>            cur = temp;<br>        &#125;<br>        return <span class="hljs-built_in">prev</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-LeetCode-24-两两交换链表中的节点-传送门"><a href="#2-LeetCode-24-两两交换链表中的节点-传送门" class="headerlink" title="2.LeetCode 24.两两交换链表中的节点 传送门"></a>2.LeetCode 24.两两交换链表中的节点 <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">传送门</a></h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs haxe"><span class="hljs-comment">// 递归</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode swapPairs(ListNode head) &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode <span class="hljs-keyword">new</span><span class="hljs-type">Head</span> = head.next;<br>        head.next = swapPairs(<span class="hljs-keyword">new</span><span class="hljs-type">Head</span>.next);<br>        <span class="hljs-keyword">new</span><span class="hljs-type">Head</span>.next = head;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"><code class="language-hljs haxe"><span class="hljs-comment">// 递归</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode swapPairs(ListNode head) &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode <span class="hljs-keyword">new</span><span class="hljs-type">Head</span> = head.next;<br>        head.next = swapPairs(<span class="hljs-keyword">new</span><span class="hljs-type">Head</span>.next);<br>        <span class="hljs-keyword">new</span><span class="hljs-type">Head</span>.next = head;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Head</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表类刷题day3</title>
      <link href="/posts/nulishuatiday3.html"/>
      <url>/posts/nulishuatiday3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">努力刷题day3</div><h3 id="1-LeetCode-203-移除链表元素-传送门"><a href="#1-LeetCode-203-移除链表元素-传送门" class="headerlink" title="1.LeetCode 203.移除链表元素 传送门"></a>1.LeetCode 203.移除链表元素 <a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">传送门</a></h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs q">class Solution &#123;<br>    public ListNode removeElements(ListNode head, <span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-comment">//删除值相同的头结点后，可能新的头结点也值相等，用循环解决</span><br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-built_in">null</span>&amp;&amp;head.val==val)&#123;<br>            head=head.<span class="hljs-built_in">next</span>;<br>        &#125;<br>        if(head==<span class="hljs-built_in">null</span>)<br>            return head;<br>        ListNode <span class="hljs-built_in">prev</span>=head;<br>        <span class="hljs-comment">//确保当前结点后还有结点</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>!=<span class="hljs-built_in">null</span>)&#123;<br>            if(<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>.val==val)&#123;<br>                <span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>=<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>;<br>            &#125;else&#123;<br>                <span class="hljs-built_in">prev</span>=<span class="hljs-built_in">prev</span>.<span class="hljs-built_in"><code class="language-hljs q">class Solution &#123;<br>    public ListNode removeElements(ListNode head, <span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-comment">//删除值相同的头结点后，可能新的头结点也值相等，用循环解决</span><br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-built_in">null</span>&amp;&amp;head.val==val)&#123;<br>            head=head.<span class="hljs-built_in">next</span>;<br>        &#125;<br>        if(head==<span class="hljs-built_in">null</span>)<br>            return head;<br>        ListNode <span class="hljs-built_in">prev</span>=head;<br>        <span class="hljs-comment">//确保当前结点后还有结点</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>!=<span class="hljs-built_in">null</span>)&#123;<br>            if(<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>.val==val)&#123;<br>                <span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>=<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>;<br>            &#125;else&#123;<br>                <span class="hljs-built_in">prev</span>=<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>;<br>            &#125;<br>        &#125;<br>        return head;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组类刷题day2</title>
      <link href="/posts/nulishuatiday2.html"/>
      <url>/posts/nulishuatiday2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">努力刷题day2</div><h3 id="LeetCode-977-有序数组的平方-传送门"><a href="#LeetCode-977-有序数组的平方-传送门" class="headerlink" title="LeetCode 977.有序数组的平方 传送门"></a>LeetCode 977.有序数组的平方 <a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">传送门</a></h3><p>:::default<br>code<br>:::<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] sortedSquares(<span class="hljs-built_in">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)<br>        &#123;<br>            nums[i]=nums[i]*nums[i];<br>        &#125;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword"><code class="language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] sortedSquares(<span class="hljs-built_in">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)<br>        &#123;<br>            nums[i]=nums[i]*nums[i];<br>        &#125;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="LeetCode-209-长度最小的子数组传送门"><a href="#LeetCode-209-长度最小的子数组传送门" class="headerlink" title="LeetCode 209.长度最小的子数组传送门"></a>LeetCode 209.长度最小的子数组<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">传送门</a></h3><p>:::default<br>code<br>:::<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> minSubArrayLen(<span class="hljs-built_in">int</span> s, <span class="hljs-built_in">int</span>[] nums) &#123;<br>        <span class="hljs-built_in">int</span> n = nums.length;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> ans = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt; n; j++) &#123;<br>                sum += nums[j];<br>                <span class="hljs-keyword">if</span> (sum &gt;= s) &#123;<br>                    ans = Math.min(ans, j - i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans == Integer.MAX_VALUE ? <span class="hljs-number"><code class="language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> minSubArrayLen(<span class="hljs-built_in">int</span> s, <span class="hljs-built_in">int</span>[] nums) &#123;<br>        <span class="hljs-built_in">int</span> n = nums.length;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> ans = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt; n; j++) &#123;<br>                sum += nums[j];<br>                <span class="hljs-keyword">if</span> (sum &gt;= s) &#123;<br>                    ans = Math.min(ans, j - i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans == Integer.MAX_VALUE ? <span class="hljs-number">0</span> : ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><div class="spoiler collapsed">    <div class="spoiler-title">        code    </div>    <div class="spoiler-content">        <p>（1） Arrays.sort()使用方法：<a href="https://blog.csdn.net/qq_41763225/article/details/82890122/">传送门-转载-侵删致谢</a><br>（2）Integer.MAX_VALUE的含义：<a href="https://blog.csdn.net/weixin_44824500/article/details/104768290">传送门-转载-侵删致谢</a></p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试面试总结（关于测试</title>
      <link href="/posts/bimian1.html"/>
      <url>/posts/bimian1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">找到工作了，一直想写一份面经汇总，奈何拖延症晚期，先开个坑，早晚得填！！！</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组类刷题day1</title>
      <link href="/posts/nulishuatiday1.html"/>
      <url>/posts/nulishuatiday1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">努力刷题day1  嘻嘻                                                       </div><h3 id="LeetCode-704-二分查找【传送门】"><a href="#LeetCode-704-二分查找【传送门】" class="headerlink" title="LeetCode 704.二分查找【传送门】"></a>LeetCode 704.二分查找【<a href="https://leetcode-cn.com/problems/binary-search/">传送门</a>】</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> search(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target) &#123;<br>        <span class="hljs-comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span><br>        <span class="hljs-keyword">if</span> (target &lt; nums[<span class="hljs-number">0</span>] || target &gt; nums[nums.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-built_in">int</span> mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>                left = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> search(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target) &#123;<br>        <span class="hljs-comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span><br>        <span class="hljs-keyword">if</span> (target &lt; nums[<span class="hljs-number">0</span>] || target &gt; nums[nums.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-built_in">int</span> mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>                left = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LeetCode-27-移除元素【传送门】"><a href="#LeetCode-27-移除元素【传送门】" class="headerlink" title="LeetCode 27.移除元素【传送门】"></a>LeetCode 27.移除元素【<a href="https://leetcode-cn.com/problems/remove-element/">传送门</a>】</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> removeElement(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> val) &#123;<br><br>        <span class="hljs-comment">// 快慢指针</span><br>        <span class="hljs-built_in">int</span> fastIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> slowIndex;<br>        <span class="hljs-keyword">for</span> (slowIndex = <span class="hljs-number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[fastIndex] != val) &#123;<br>                nums[slowIndex] = nums[fastIndex];<br>                slowIndex++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword"><code class="language-hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> removeElement(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> val) &#123;<br><br>        <span class="hljs-comment">// 快慢指针</span><br>        <span class="hljs-built_in">int</span> fastIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> slowIndex;<br>        <span class="hljs-keyword">for</span> (slowIndex = <span class="hljs-number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[fastIndex] != val) &#123;<br>                nums[slowIndex] = nums[fastIndex];<br>                slowIndex++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slowIndex;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建图床</title>
      <link href="/posts/e5f3.html"/>
      <url>/posts/e5f3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">最近搭建好Hexo博客，昨天开始迁移博客的时候，思考图片存储问题。于是，开始搜索，看到大家都是用一个云+Picgo+Typora搭建了一个图床。前几天在找Markdown编辑器的时候，最初的想法也是用Typora，但是奈何官网进不去，遂转入MWeb。</div><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><p>1.链接：<a href="https://www.aliyun.com/product/oss">https://www.aliyun.com/product/oss</a><br>2.开通：一年9块钱<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111410220.png" alt><br>3.创建Bucket列表<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111414857.png" alt><br>4.生成 Access Key和AccessKey Secret<br>（在下图右下角常见入口，左侧第二个）<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111415577.png" alt></p><h2 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h2><p>1.下载：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a><br>按照作者的教程来就行，需要注意的就是Mac会提示风险app，在安全里允许一下就好了<br>2.配置：如图<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111444858.png" alt><br>值得说的是，我在上传图片的时候报403，说说解决办法，首先在PicGO设置里看起服务，确保自己配置信息没有写错。<br>上传失败一定在PicGo中看看日志文件。</p><h2 id="Mweb"><a href="#Mweb" class="headerlink" title="Mweb"></a>Mweb</h2><p>1.下载：APP Store<br>2.配置<br>(1)在这里选择偏好设置—-&gt;<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111425766.png" alt><br>(2)按照下图点击—-&gt;<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111431149.png" alt><br>(3)填写配置信息<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201111435044.png" alt><br>（4）填写好后点击确定，发布服务。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>上述完成后就可以使用了，有图片就上传到PicGo，然后复制图片代码，在写博客的时候粘贴即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长春径点科技有限公司-软件测试 面试</title>
      <link href="/posts/be61.html"/>
      <url>/posts/be61.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>第一次正式面试，我很蠢。</p></blockquote><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>1.你先进行一下自我介绍吧！</p><p>2.你理解 ip 么？</p><p>3.你用过微信传输助手吗？如果你进行测试测试点怎么考虑？</p><p>4.你了解虚拟机吗？</p><p>5.用过 sql server 么？还记得查询语句么？</p><p>6.你理解测试流程么？你对迭代测试的理解？集成测试的理解？</p><p>7.你自学过什么技术么？</p><p>8.你之前做过前端岗位，为什么想做测试？</p><p>9.薪资问题。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ValueError:not enough values to unpack (expected 3, got 0)</title>
      <link href="/posts/3f60.html"/>
      <url>/posts/3f60.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>侵删致谢</p></blockquote><p>运行github上的大佬的代码：<a href="https://github.com/YunYang1994/tensorflow-yolov3">https://github.com/YunYang1994/tensorflow-yolov3</a>，在进行python train.py的时候:ValueError: not enough values to unpack (expected 3, got 0),github中部分解决方法<a href="https://github.com/YunYang1994/tensorflow-yolov3/issues/396">https://github.com/YunYang1994/tensorflow-yolov3/issues/396</a>，但尝试后都没有成功运行，后来发现只是因为路径包含中文。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip安装更新问题</title>
      <link href="/posts/6074.html"/>
      <url>/posts/6074.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>侵删致谢</p></blockquote><h3 id="pip-问题"><a href="#pip-问题" class="headerlink" title="pip 问题"></a>pip 问题</h3><p>安装或更新都会出现一下问题：<br><figure class="highlight plain"><figcaption><span>Exception:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs ERROR:"><code class="language-hljs ERROR:">Traceback (most recent call last):<br></code></pre></td></tr></table></figure><br>解决办法就是找个镜像：推荐（XXX是需要安装的）</p><figure class="highlight plain"><figcaption><span>install XXX -i</span><a href="http://pypi.douban.com/simple">--trusted-host pypi.douban.com</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs pip"><code class="language-hljs pip">&#96;&#96;&#96;<br><br>### 使用oenpyxl的问题<br>1、如下：<br><br>&#96;&#96;&#96;TypeError: got invalid input value of type <class 'xml.etree.ElementTree.Element'>, expected string <br></code></pre></td></tr></table></figure><p>openpyxl版本问题，我把本身自带的版本3.0.2卸载，安装了3.0.0后就不再出现次错误。</p><p>安装3.0.0</p><figure class="highlight plain"><figcaption><span>install openpyxl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs pip"><code class="language-hljs pip">&#96;&#96;&#96;<br>![](https:&#x2F;&#x2F;zzblogimages.oss-cn-beijing.aliyuncs.com&#x2F;202201191016019.png)<br><br>卸载3.0.2<br>&#96;&#96;&#96;pip uninstall openpyxl<br></code></pre></td></tr></table></figure><p><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202201191017522.png" alt></p><p>补充：网上有教程是包冲突，我卸载了lxml，还是会报错，不过大家可以尝试一下。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>citespace使用方法/经验总结</title>
      <link href="/posts/ec7a.html"/>
      <url>/posts/ec7a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-citespace初学者使用："><a href="#1-citespace初学者使用：" class="headerlink" title="1. citespace初学者使用："></a>1. citespace初学者使用：</h3><p><a href="https://wenku.baidu.com/view/4da3fd1a6294dd88d1d26b64.html%20%20%20%20%20">https://wenku.baidu.com/view/4da3fd1a6294dd88d1d26b64.html     </a><br><a href="https://www.jianshu.com/p/49d41d0ccd7fhttps://www.jianshu.com/p/49d41d0ccd7f%20%20%20%20">https://www.jianshu.com/p/49d41d0ccd7fhttps://www.jianshu.com/p/49d41d0ccd7f    </a>   </p><h3 id="2-有一个公众号“学术点滴”，感谢大佬"><a href="#2-有一个公众号“学术点滴”，感谢大佬" class="headerlink" title="2. 有一个公众号“学术点滴”，感谢大佬"></a>2. 有一个公众号“学术点滴”，感谢大佬</h3><h3 id="3-解决关键词聚类标签显示省略号问题："><a href="#3-解决关键词聚类标签显示省略号问题：" class="headerlink" title="3. 解决关键词聚类标签显示省略号问题："></a>3. 解决关键词聚类标签显示省略号问题：</h3><p><a href="http://blog.sciencenet.cn/blog-3195540-1053515.html">http://blog.sciencenet.cn/blog-3195540-1053515.html</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24点游戏 python</title>
      <link href="/posts/620e.html"/>
      <url>/posts/620e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>常见游戏规则：<br>从扑克中每次取出4张牌。使用加减乘除，第一个能得出24者为赢。（其中，J代表&gt;11，Q代表12，K代表13，A代表1），按照要求编程解决24点游戏。</p></blockquote><p>随机产生四个数字用python中的函数进行全排列<br>随机数的生成：<br>对于python随机数的生成，通过导入包来实现，即import  random<br><img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202202222143990.png" alt><br>本程序中因为要生成4个（1——13）的整形数字，采用randint<br>对四个随机数的全排列：<br>对于python可以通过python的包itertools所以不用自己写递归函数实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs itertools.permutations"><code class="language-hljs itertools.permutations">&#96;&#96;&#96;<br>通俗地讲，就是返回可迭代对象的所有数学全排列方式。<br>&#96;&#96;&#96;listCardSet &#x3D; list(set(itertools.permutations(listCardNum, 4)))#全排列4个数<br>return  listCardSet<br></code></pre></td></tr></table></figure><br>例如：8,13,3,5产生的全排列</p><p>(8, 13, 3, 5), (13, 5, 8, 3), (5, 3, 8, 13), (13, 3, 8, 5), (3, 5, 8, 13), (3, 13, 5, 8),</p><p> (3, 5, 13, 8), (5, 3, 13, 8), (8, 13, 5, 3), (8, 5, 13, 3), (8, 3, 5, 13), (5, 8, 3, 13),</p><p> (13, 8, 3, 5), (13, 3, 5, 8), (8, 3, 13, 5), (5, 8, 13, 3), (3, 8, 13, 5), (5, 13, 3, 8),</p><p> (13, 8, 5, 3), (5, 13, 8, 3), (8, 5, 3, 13), (3, 13, 8, 5), (3, 8, 5, 13), (13, 5, 3, 8)</p><p>显示：<br><figure class="highlight plain"><figcaption><span>__name__ </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs if">print(&quot;************************欢迎进入24点游戏************************&quot;)<br>print(&quot;该系统会随机产生四张牌，并帮助您算出可以实现24点的所有算法&quot;)<br></code></pre></td></tr></table></figure><br> <img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202202222146226.png" alt><br>代码分析：<br>I.需要的包：<br><figure class="highlight plain"><figcaption><span>itertools</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs import"><code class="language-hljs if">print(&quot;************************欢迎进入24点游戏************************&quot;)<br>print(&quot;该系统会随机产生四张牌，并帮助您算出可以实现24点的所有算法&quot;)<br></code></pre></td></tr></table></figure><br> <img src="https://zzblogimages.oss-cn-beijing.aliyuncs.com/202202222146226.png" alt><br>代码分析：<br>I.需要的包：<br><figure class="highlight plain"><figcaption><span>itertools</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs import">import random<br></code></pre></td></tr></table></figure><br>II.随机产生数字和全排列：</p><p>```def card_rand():<br>    for i in range(4):<br>        list_random.append(random.randint(1, 13))                    #list.append(obj)<br>    list_quanpai = list(set(itertools.permutations(list_random, 4)))#全排列4个数<br>    return  list_quanpai<br>listCard = card_rand()  # 排列组合结果</p><h1 id="print-listCard-输出所有排列"><a href="#print-listCard-输出所有排列" class="headerlink" title="print(listCard)#输出所有排列"></a>print(listCard)#输出所有排列</h1><p>```III. 计算函数：</p><p>```def card_calculate():<br>    for i in range(len(listCard)):<br>        list1_Card = listCard[i]</p><pre><code>    cardOne = list1_Card[0]    cardTwo = list1_Card[1]    cardThree = list1_Card[2]    cardFour = list1_Card[3]  # 得到四张牌的点数    flag = False  # 标志位    try:        for o1 in listOperator:            resultOne = 0  # 前两个数的运算结果            if o1 == &quot;+&quot;:                resultOne = cardOne+cardTwo            elif o1 == &quot;-&quot;:                resultOne = cardOne-cardTwo            elif o1 == &quot;*&quot;:                resultOne = cardOne*cardTwo            elif o1 == &quot;/&quot;:                resultOne = cardOne/cardTwo            for o2 in listOperator:                resultTwo = 0  # 前三个数的运算结果                if o2 == &quot;+&quot;:                    resultTwo = resultOne + cardThree                elif o2 == &quot;-&quot;:                    resultTwo = resultOne - cardThree                elif o2 == &quot;*&quot;:                    resultTwo = resultOne * cardThree                elif o2 == &quot;/&quot;:                    resultTwo = resultOne / cardThree                for o3 in listOperator:                    resultThree = 0  # 四个数的运算结果                    resultFinal = 0  # 最后两个数的运算结果                    if o3 == &quot;+&quot;:                        resultThree = resultTwo + cardFour                        resultFinal = cardThree + cardFour                    elif o3 == &quot;-&quot;:                        resultThree = resultTwo - cardFour                        resultFinal = cardThree - cardFour                    elif o3 == &quot;*&quot;:                        resultThree = resultTwo * cardFour                        resultFinal = cardThree * cardFour                    elif o3 == &quot;/&quot;:                        resultThree = resultTwo / cardFour                        resultFinal = cardThree / cardFour</code></pre><p>```<br>源码：<a href="https://download.csdn.net/download/qq_41233643/11112033">https://download.csdn.net/download/qq_41233643/11112033</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
